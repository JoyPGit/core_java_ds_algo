THREE WAYS :

1 THREADS SYNCHRONIZED
2 SEMPAHORES
3 BLOCKING QUEUES

start, sleep, wait, lock, notify

start -> thread starts, t = new Thread( obj, "thread_name"); t.start();

wait -> forces the current thread to wait until some other thread invokes notify() or notifyAll() 
on the same object; makes thread relinquish the lock

notify -> notifies other threads; Since notify() wakes up a single random thread it can be 
used to implement mutually exclusive locking where threads are doing similar tasks, 
but in most cases, it would be more viable to implement notifyAll().

lock


---------------------------------------------------------------
A Java synchronized block marks a method or a block of code as synchronized. 
A synchronized block in Java can only be executed as a single thread at a time (depending on how you use it). 
Java synchronized blocks can thus be used to avoid race conditions.

The synchronized keyword can be used to mark four different types of blocks:

Instance methods
Static methods
Code blocks inside instance methods
Code blocks inside static methods


http://tutorials.jenkov.com/java-concurrency/synchronized.html

synchronized void printOdd(int number) {
    while (isOdd) {
        try {
            System.out.println("before wait");
            wait();
            System.out.println("after wait");
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
    System.out.println(Thread.currentThread().getName() + " : " + number);
    isOdd = true;
    notify();
    
}

Volatile keyword is used to modify the value of a variable by different threads. 
It is also used to make classes thread safe. It means that multiple threads can use a 
method and instance of the classes at the same time without any problem.

* The awakened thread will not be able to proceed until the current thread 
* relinquishes the lock on this object. Hence thread enters while loop.
* 'wait' makes it relinquish the lock.

----------------------------------------------------------
Should i use synchronized in each thread class
or use a single synchronized method and make threads access it?

* Producer-Consumer uses 2 synchronized methods
* for printing even odd, also used 2

but for synchronized to work a critical resource is required, either
the synchronized block becomes the critical resource or a common
no primitive data structure is chosen.


----------------------------------------------------------


----------------------------------------------------------
ERRORS :

Syntax error, insert "... VariableDeclaratorId" to complete FormalParameterList

You can't have arbitrary code like that directly in the class body. 
It must be in a method (or constructor, or initialization block).


executor framework
join


In a thread-based multitasking environment, the thread is the smallest unit of dispatchable code. This means that a single program can perform two or more tasks simultaneously.
Java uses threads to enable the entire environment to be asynchronous. This helps reduce inefficiency by preventing the waste of CPU cycles.

Single-threaded systems use an approach called an event loop with polling. In this model, a single thread of control runs in an infinite loop, polling a single event queue to decide what to do next. Once this polling mechanism returns with, say, a signal that a network file is ready to be read, then the event loop dispatches control to the appropriate event handler

synchronized
A Java synchronized block marks a method or a block of code as synchronized. A synchronized block in Java can only be executed a single thread at a time.

The synchronized keyword can be used to mark four different types of blocks:

1 Instance methods
2 Static methods
3 Code blocks inside instance methods
4 Code blocks inside static methods

Only one thread per instance can execute inside a synchronized instance method.
One thread per instance.

This is true across all synchronized instance methods for the same object (instance). Thus, in the following example, only one thread can execute inside either of of the two synchronized methods. One thread in total per instance:

public class MyCounter {

  private int count = 0;

  public synchronized void add(int value){
      this.count += value;
  }
  public synchronized void subtract(int value){
      this.count -= value;
  }

}

Synchronized Blocks in Static Methods
Synchronized blocks can also be used inside of static methods. Here are the same two examples from the previous section as static methods. These methods are synchronized on the class object of the class the methods belong to:

  public class MyClass {

    public static synchronized void log1(String msg1, String msg2){
       log.writeln(msg1);
       log.writeln(msg2);
    }

  
    public static void log2(String msg1, String msg2){
       synchronized(MyClass.class){
          log.writeln(msg1);
          log.writeln(msg2);  
       }
    }
  }
Only one thread can execute inside any of these two methods at the same time.

Had the second synchronized block been synchronized on a different object than MyClass.class, then one thread could execute inside each method at the same time.

----------------------------

Synchronized Block Reentrance
Once a thread has entered a synchronized block the thread is said to "hold the lock" on the monitoring object the synchronized block is synchronized on. If the thread calls another method which calls back to the first method with the synchronized block inside, the thread holding the lock can reenter the synchronized block. It is not blocked just because a thread (itself) is holding the lock. Only if a differen thread is holding the lock. Look at this example:

public class MyClass {
    
  List<String> elements = new ArrayList<String>();
    
  public void count() {
    if(elements.size() == 0) {
        return 0;
    }
    synchronized(this) {
       elements.remove();
       return 1 + count();  
    }
  }
    
}
Forget for a moment that the above way of counting the elements of a list makes no sense at all. Just focus on how inside the synchronized block inside the count() method calls the count() method recursively. Thus, the thread calling count() may eventually enter the same synchronized block multiple times. This is allowed. This is possible.

---------------------------

In case a class contains more than one static synchronized method, only one thread can execute inside any of these methods at the same time. Look at this static synchronized method example:

public static MyStaticCounter{

  private static int count = 0;

  public static synchronized void add(int value){
    count += value;
  }

  public static synchronized void subtract(int value){
    count -= value;
  }
}


Wait vs Sleep
Object.wait; Thread.sleep

Sleep(): This Method is used to pause the execution of current thread for a specified time in Milliseconds. Here, Thread does not lose its ownership of the monitor and resume’s it’s execution

Wait(): This method is defined in object class. It tells the calling thread (a.k.a Current Thread) to wait until another thread invoke’s the notify() or notifyAll() method for this object, The thread waits until it reobtains the ownership of the monitor and Resume’s Execution.
Wait()	Sleep()
Wait() method belongs to Object class.	Sleep() method belongs to Thread class.
Wait() method releases lock during Synchronization.	
Sleep() method does not release the lock on object during Synchronization.
Wait() should be called only from Synchronized context.	There is no need to call sleep() from Synchronized context.
Wait() is not a static method. 	Sleep() is a static method. 

Wait() Has Three Overloaded Methods:

    wait()
    wait(long timeout)
    wait(long timeout, int nanos)

	

Sleep() Has Two Overloaded Methods:

    sleep(long millis)millis: milliseconds
    sleep(long millis,int nanos) nanos: Nanoseconds


https://stackoverflow.com/questions/38487099/is-spring-transactional-thread-safe

