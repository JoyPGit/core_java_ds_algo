Overriding: Overriding is a feature of OOP languages like Java that is related to run-time polymorphism. A subclass (or derived class) provides a specific implementation of a method in the superclass (or base class). 
The implementation to be executed is decided at run-time and a decision is made according to the object used for the call. Note that signatures of both methods must be the same.

Overloading: Overloading is also a feature of OOP languages like Java that is related to compile-time (or static) polymorphism. This feature allows different methods to have the same name, but different signatures, especially the number of input parameters and type of input parameters. Note that in both C++ and Java, methods cannot be overloaded according to the return type.

Can we overload static methods? 
The answer is ‘Yes’. We can have two or more static methods with the same name, but differences in input parameters. For example, consider the following Java program. 

public static void foo() {
    System.out.println("Test.foo() called ");
}

public static void foo(int a) {
    System.out.println("Test.foo(int) called ");
}

Can we Override static methods in java? 
We can declare static methods with the same signature in the subclass, but it is not considered overriding as there won’t be any run-time polymorphism. Hence the answer is ‘No’. 


 
In both cases, the return type is the same a dnte access specifier can be less restrictive
protected to public.
priavte and static methods can't ebe overriden.

Why can I override a protected method with public method?

A sub-class can always widen the access modifier, because it is still a valid substitution for the super-class. From the Java specification about Requirements in Overriding and Hiding:

The access modifier (§6.6) of an overriding or hiding method must provide at least as much access as the overridden or hidden method, as follows:

If the overridden or hidden method is public, then the overriding or hiding method must be public; otherwise, a compile-time error occurs.
If the overridden or hidden method is protected, then the overriding or hiding method must be protected or public; otherwise, a compile-time error occurs.
If the overridden or hidden method has default (package) access, then the overriding or hiding method must not be private; otherwise, a compile-time error occurs.