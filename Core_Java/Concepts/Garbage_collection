
https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html


https://stackify.com/what-is-java-garbage-collection/


Java garbage collection is the process by which Java programs perform automatic memory management. 
Java programs compile to bytecode that can be run on a Java Virtual Machine, or JVM for short. 
When Java programs run on the JVM, objects are created on the heap, which is a portion of memory 
dedicated to the program. Eventually, some objects will no longer be needed. The garbage collector 
finds these unused objects and deletes them to free up memory.

Java garbage collection is an automatic process. The programmer does not need to explicitly mark 
objects to be deleted. The garbage collection implementation lives in the JVM. 

HOW GC WORKS?

In the first step, unreferenced objects are identified and marked as ready for garbage collection. 
In the second step, marked objects are deleted. Optionally, memory can be compacted after the 
garbage collector deletes objects, 
so remaining objects are in a contiguous block at the start of the heap. 
The compaction process makes it easier to allocate memory to new objects sequentially 
after the block of memory allocated to existing objects.

The heap is divided into three sections:

Young Generation: Newly created objects start in the Young Generation. 
The Young Generation is further subdivided into an Eden space, where all new objects start, 
and two Survivor spaces, where objects are moved from Eden after surviving one garbage collection cycle. 
When objects are garbage collected from the Young Generation, it is a minor garbage collection event.

Old Generation: Objects that are long-lived are eventually moved from the Young Generation to the 
Old Generation. When objects are garbage collected from the Old Generation, it is a major 
garbage collection event.

Permanent Generation: Metadata such as classes and methods are stored in the Permanent Generation. 
Classes that are no longer in use may be garbage collected from the Permanent Generation.


During a full garbage collection event, unused objects in all generations are garbage collected.

HotSpot has four garbage collectors:

Serial: All garbage collection events are conducted serially in one thread. 
Compaction is executed after each serial garbage collection.

Parallel: Multiple threads are used for minor garbage collection. A single thread is used 
for major garbage collection and Old Generation compaction. Alternatively, the Parallel Old variant 
uses multiple threads for major garbage collection and Old Generation compaction.

MINOR GC USING MULTIPLE AND MAJOR GC WITH COMPACTION USING SINGLE THREAD

CMS (Concurrent Mark Sweep): Multiple threads are used for minor garbage collection using 
the same algorithm as Parallel. Major garbage collection is multi-threaded, 
like Parallel Old, but CMS runs concurrently alongside application processes to minimize 
“stop the world” events (i.e. when the garbage collector running stops the application). 
No compaction is performed.

BOTH MINOR GC AND MAJOR GC USING MULTIPLE THREADS


G1 (Garbage First): The newest garbage collector is intended as a replacement for CMS. 
It is parallel and concurrent like CMS, but it works quite differently under the hood 
compared to the older garbage collectors.

FINALIZE method is invoked each time before the object is garbage collected. 

System.gc();

public class TestGarbage1{  
   public void finalize(){
      System.out.println("object is garbage collected");
   }  
   public static void main(String args[]){  
      TestGarbage1 s1=new TestGarbage1();  
      TestGarbage1 s2=new TestGarbage1();  
      s1=null;  
      s2=null;  
      System.gc();  
   }  
}  
