
Runtime Polymorphism in Java.  (method overriding)
Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden 
method is resolved at runtime rather than compile-time.

Difference between abstract class and interface
1 Abstract class can have abstract and non-abstract methods. Interface can have only abstract methods. 
Since Java 8, it can have default and static methods also.

2 Interface supports multiple inheritance.

3 abstract class has constructors

diff b/w path and class path

stack vs heap memory

https://www.baeldung.com/java-type-erasure
Type erasure can be explained as the process of enforcing type constraints only at compile time 
and discarding the element type information at runtime.

Type erasure can occur at class (or variable) and method levels.

At the class level, the compiler discards the type parameters on the class and 
replaces them with its first bound, or Object if the type parameter is unbound.

Class type erasure
public class Stack<E> {
    private E[] stackContent;

    public Stack(int capacity) {
        this.stackContent = (E[]) new Object[capacity];
    }
}
Upon compilation, the compiler replaces the unbound type parameter E with Object:

public class Stack {
    private Object[] stackContent;

    public Stack(int capacity) {
        this.stackContent = (Object[]) new Object[capacity];
    }
}

Method type erasure

public static <E> void printArray(E[] array) {
    for (E element : array) {
        System.out.printf("%s ", element);
    }
}
Upon compilation, the compiler replaces the type parameter E with Object:

public static void printArray(Object[] array) {
    for (Object element : array) {
        System.out.printf("%s ", element);
    }
}

https://www.java67.com/2013/07/15-advanced-core-java-interview-questions-answers-senior-experienced-5-6-years-programmers-developers.html


https://java2blog.com/core-java-interview-questions-and-answers/

https://java2blog.com/java-interview-questions-for-5-years-experience/

concurrent hashmap
https://www.baeldung.com/java-equals-hashcode-contracts#:~:text=3.-,hashCode(),have%20to%20override%20hashCode().

ssl 
dns server

https://www.java67.com/2013/07/15-advanced-core-java-interview-questions-answers-senior-experienced-5-6-years-programmers-developers.html


https://www.baeldung.com/java-type-erasure
    

functional interfaces, lambda

thread -> schildt book

https://www.java67.com/2013/07/15-advanced-core-java-interview-questions-answers-senior-experienced-5-6-years-programmers-developers.html
https://java2blog.com/java-interview-questions-for-5-years-experience/

https://www.youtube.com/watch?v=FB6RsHx7S6A

static in interface?

https://stackoverflow.com/questions/16750772/instantiating-interfaces-in-java

https://www.javatpoint.com/difference-between-abstract-class-and-interface

https://www.youtube.com/watch?v=Ud0zfImgbYw
interface 100% abstract class,
abstract method no body

interface -> multiple inheritance
when no idea of implementation, use interface
methods in interfaces are public

abstract class can have abstract as well as concrete methods, 

we can have functional interface, ()=>{};

multiple inheritance in interface

methods in interface 

variables in interface are public static and need to be initialised
variables in classes can be final, non-final, static, non-static

abstract class can have a constructor

constructors are mostly for instantiating non static variables, not object creation

/**
    * Some research. What is an Integer? And why cannot we use int in an ArrayList?
    * An Integer is a reference type (a class). An int is a value. 
    * And: The ArrayList requires, in its implementation, a reference type. So int is not
    * allowed.
    * 
    * Quote: The Integer class wraps a value of the primitive type int in an
    * object. An object of type Integer contains a single field whose type is int
    * (Java Documentation).
*/

class Singleton 
{ 
    // static variable single_instance of type Singleton 
    private static Singleton single_instance = null; 
  
    // variable of type String 
    public String s; 
  
    // private constructor restricted to this class itself 
    private Singleton() 
    { 
        s = "Hello I am a string part of Singleton class"; 
    } 
  
    // static method to create instance of Singleton class 
    public static Singleton getInstance() 
    { 
        if (single_instance == null) 
            single_instance = new Singleton(); 
  
        return single_instance; 
    } 
} 
  
// Driver Class 
class Main 
{ 
    public static void main(String args[]) 
    { 
        // instantiating Singleton class with variable x 
        Singleton x = Singleton.getInstance(); 
  
        // instantiating Singleton class with variable y 
        Singleton y = Singleton.getInstance(); 
  
        // instantiating Singleton class with variable z 
        Singleton z = Singleton.getInstance(); 
  
        // changing variable of instance x 
        x.s = (x.s).toUpperCase(); 
  
        System.out.println("String from x is " + x.s); 
        System.out.println("String from y is " + y.s); 
  