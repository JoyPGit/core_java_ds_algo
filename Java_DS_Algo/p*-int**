// closures, callbacks

let f =(i, o)=>{
    let variableOff
    if(i==2){
        g(j,()=>{
            if(){
                 h(k,()=>{

                })
            }
           
        });
    }

    insideF(){
        this.va
    }
    return insideF();
};


let g= f();

let x = new Promise((res, rej)=>{
    if(){

    }
})

try{
    let x = await f();
    let y = await g(x);
}

catch(){

}


async function f(){
    return axios.get(')
    .catch()
}

axios 
class g{
    int v;
    g(){
        thias, v = ;
    }
    get Ste
}

g o = new g();
o.set


jwt 
middlewares
app.use()


// sending push notifs all contacts of all users

User
_id, name, contacts:[{}], dob, phoneNo

contacts :[
    {
    _id:,
    phoneNo,
    timestamp:
    }
]


_id, phoneNo, contact_id


int[] rows; int[] cols; int[] ldia; int[] rdia;

char[][] baord; 
//'a' -> player A
boolean checkWinner(int row, int col, char a){
    // n -> board size    
    // check row
    for(int i =0; i<n; i++){
        if(i == row) continue;
        if(board[i][col] !='a') return false;
    }

    // check col
    for(int i =0; i<n; i++){
        if( i == col) continue;
        if(board[row[i] !=a) return false;
    }

    01; 10
    00 20 02 22
    // if any edge els, like row ==0||n-1; col ==0||n-1, continue
    if(row+col)%2==0){
        // if left dia '\', top left corner
        for(int i =0, j=0; i<n, j<n; i++, j++){
            if(board[i][j] != 'a') return false;
        }

        // if right dia '/', top right corner
        for(int i =n-1, j=0; i<n, j>=0; i++, j--){
            if(board[i][j] != 'a') return false;
        }

        return true;
    }
    

}
